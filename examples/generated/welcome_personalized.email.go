// Code generated by mailc. DO NOT EDIT.
// Version: mailc DEBUG

package emails

import (
	"bytes"
	"fmt"
	htmltemplate "html/template"
	texttemplate "text/template"
)

type WelcomePersonalizedEmailData struct {
	Username  string
	FirstName string
}

type WelcomePersonalizedEmailResult struct {
	Subject string
	HTML    string
}

const welcomePersonalizedEmailHTMLTemplate = `<html>

<head>
    <meta charset="UTF-8">
    <title>Welcome Email</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        th {
            background-color: #f2f2f2;
        }
    </style>
</head>

<body>
    <h1>Welcome to ACME! {{ .FirstName}}</h1>
    <p>We're excited to have you join ACME.</p>
</body>

</html>`
const welcomePersonalizedEmailSubjectTemplate = `Welcome to ACME {{ .Username}}.`

func WelcomePersonalizedEmail(data *WelcomePersonalizedEmailData) (result WelcomePersonalizedEmailResult, err error) {
	bodyTmpl, err := htmltemplate.New("welcome_personalized").Parse(welcomePersonalizedEmailHTMLTemplate)
	if err != nil {
		return result, fmt.Errorf("parse body template: %w", err)
	}

	var bodyBuf bytes.Buffer
	if err := bodyTmpl.Execute(&bodyBuf, data); err != nil {
		return result, fmt.Errorf("render body: %w", err)
	}

	result.HTML = bodyBuf.String()

	subjTmpl, err := texttemplate.New("welcome_personalized_subject").Parse(welcomePersonalizedEmailSubjectTemplate)
	if err != nil {
		return result, fmt.Errorf("parse subject template: %w", err)
	}

	var subjBuf bytes.Buffer
	if err := subjTmpl.Execute(&subjBuf, data); err != nil {
		return result, fmt.Errorf("render subject: %w", err)
	}

	result.Subject = subjBuf.String()
	return result, nil
}
